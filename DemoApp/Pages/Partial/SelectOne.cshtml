@using DemoApp.Models
@using DemoApp.Models.Simulator
@model DemoApp.Models.ViewModels.PropertyRendererModel
@{
    var kodeliste = XsdUtils.GetKodeliste(Model.Prop) 
        ?? throw new Exception($"Finner ikke kodeliste for type {XsdUtils.GetName(Model.Prop)}");
    List<Kode> koder = kodeliste.koder.ToList();
    var fixedValue = XsdUtils.GetFixedValue(Model.Prop);
    var prefilled = Model.Melding.GetPrefilledValueFor(Model.GetId());
    string value = fixedValue != "" ? fixedValue : ((prefilled?.Value) ?? "");
    bool disable = ((fixedValue != "") || prefilled?.OpenToEdit == false);
    string disableCssClass = (disable) ? "disabled_button" : "";
    string disableStr = (disable) ? "disabled" : "";
    string changeHandler = (disable) ? "" : "checkDependentControlsActivation(this)";
    string visibleIdAndName = @Model.GetId() + ((disable) ? "_disabled" : ""); // gi disablet input et navn som gjør at de ikke hentes ut
    <span class="ledetekst @disableCssClass">@Model.GetCaption(true)@Html.Raw(Utils.getMandatoryMarker(Model))</span>
    @await Html.PartialAsync($"/Pages/Partial/Beskrivelse.cshtml", @Model.GetDescription())
    if (disable)
    {
        <input type="hidden" name="@Model.GetId()" value="@value" />
    }
    else
    {
        Model.CheckAddEnabler();
    }
    <select title="@Model.GetId()" class="dropdown" name="@visibleIdAndName" id="@visibleIdAndName" onchange="@changeHandler" @disableStr>
            <option selected value=""> -- Velg -- </option>
            @foreach (var kode in koder)
            {
                    if (kode.verdi == value)
                    {
                        <option value="@kode.verdi" selected>@kode.tekst</option>
                    }
                    else
                    {
                        <option value="@kode.verdi">@kode.tekst</option>
                    }
            }
    </select>
}
