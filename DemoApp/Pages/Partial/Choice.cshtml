@using DemoApp.Models
@using DemoApp.Models.Fagsystem
@using System.Xml.Schema
@using DemoApp.Models.ViewModels
@model DemoApp.Models.ViewModels.PropertyRendererModel
@{
    var rawElements = XsdUtils.GetChoiceElements(Model.Prop)
                ?? throw new Exception("choiceElements is null");
    if (rawElements.Any(ce => !(ce is XmlSchemaElement)))
    {
        throw new Exception("choiceElements inneholder element hvor (is XmlSchemaElement == false)");
    }
    var choiceElements = rawElements.Cast<XmlSchemaElement>();
    var prefilled = TestdataGenerator.GetPrefilledValueFor(Model.Values, $"selected_{Model.GetId()}");
    var selectedValue = Utils.GetRequestValue(Model.Melding.QueryParams, $"selected_{Model.GetId()}");
    var selectedElement = (selectedValue != "") ? choiceElements.FirstOrDefault(ch => ch.Name == selectedValue) : null;
    string value = (prefilled?.Value) ?? "";
    bool disable = (prefilled?.OpenToEdit == false);
    string disableCssClass = (disable) ? "disabled_button" : "";
    string disableStr = (disable) ? "disabled" : "";
    <div>
        <span class="ledetekst @disableCssClass">@Model.GetCaption(true)@Html.Raw(Utils.getMandatoryMarker(Model.Mandatory))</span>
    @await Html.PartialAsync($"/Pages/Partial/Beskrivelse.cshtml", @Model.GetDescription())
        @if(disable)
        {
            <select class="dropdown" name="selected_@Model.GetId()" id="selected_@Model.GetId()" onchange="this.form.submit()" disabled>
                @if (selectedValue == "")
                {
                    <option value=""> -- Velg -- </option>
                }
                else
                {
                    <option selected value=""> -- Velg -- </option>
                }
                @foreach (var choiceElement in choiceElements)
                {
                    if (choiceElement.Name == selectedValue)
                    {
                        <option value="@choiceElement.Name" selected>@XsdUtils.GetCaption(choiceElement, true)</option>
                    }
                    else
                    {
                        <option value="@choiceElement.Name">@XsdUtils.GetCaption(choiceElement, true)</option>
                    }
                }
            </select>
        }
        else
        {
            Model.CheckAddEnabler();
            <select class="dropdown" name="selected_@Model.GetId()" id="selected_@Model.GetId()" onchange="this.form.submit()">
                @if (selectedValue == "")
                {
                    <option value=""> -- Velg -- </option>
                }
                else
                {
                    <option selected value=""> -- Velg -- </option>
                }
                @foreach (var choiceElement in choiceElements)
                {
                    if (choiceElement.Name == selectedValue)
                    {
                        <option value="@choiceElement.Name" selected>@XsdUtils.GetCaption(choiceElement, true)</option>
                    }
                    else
                    {
                        <option value="@choiceElement.Name">@XsdUtils.GetCaption(choiceElement, true)</option>
                    }
                }
            </select>
        }
        @if (selectedElement != null)
        {
            @await Html.PartialAsync($"/Pages/Partial/Gruppe.cshtml", new PropertyRendererModel(Model, Model.Melding, $"{Model.XPath}", selectedElement, Model.Values))
        }
    </div>
}
