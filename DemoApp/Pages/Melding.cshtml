@page
@using DemoApp.Models
@using DemoApp.Models.Simulator
@using DemoApp.Models.ViewModels
@using System.Xml.Schema
@using System.Xml
@model DemoApp.Pages.MeldingModel
@{
    @await Html.PartialAsync("/Pages/Partial/MeldingsprotokollVersjon.cshtml", Model)

    if (Model.SelectedProtocol != null)
    {
        @await Html.PartialAsync("/Pages/Partial/Skjemavelger.cshtml", Model)

        @if (Model.SelectedSchema != null)
        {
            var fileName = Model.SelectedSchema.TargetNamespace;
            @await Html.PartialAsync("/Pages/Partial/Gruppe.cshtml", new PropertyRendererModel(null, Model, "", XsdUtils.GetRootElement(Model.SelectedSchema)))
            <input type="button" name="Send" onclick="postForm('LagreMelding', 'sendt')" value="Send" />
            <input type="button" name="Lagre" onclick="postForm('LagreMelding', 'lagret')" value="Lagre" />
            <input type="hidden" name="actionParam" id="actionParam" value="">
            <input type="hidden" name="XSD_FIL" id="XSD_FIL" value="@fileName">
            <input type="hidden" name="@Konstanter.XmlFil" id="@Konstanter.XmlFil" value="@Model.ExistingFile">
            <input type="hidden" name="Redigert">
        }
    }
}

@section Scripts
{
    @foreach (ControlEnabler enabler in Model.controlEnablers)
    {
        <script>
            registerDependentControl('@enabler.EnabledControlId', '@enabler.ControlId', '@enabler.ControlValue', @(enabler.IsInverted ? 1 : 0));
        </script>
    }
    <script>
        setDependentControlsDefault();
    </script>
}